# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Toolchain-related configuration that may be needed outside the context of the
# toolchain() rules themselves.

import("cc_wrapper.gni")

declare_args() {
  share_ccache = ""
}

# This template defines a toolchain for something that works with clang
#
# Optional parameters that control the tools:
#
# - cc
# - cxx
# - ld
# - asm
# - ar
#
# - link_libs_section_prefix
# - link_libs_section_suffix
#     The contents of these strings, if specified, will be placed around
#     the libs section of the linker line. It allows one to inject libraries
#     at the beginning and end for all targets in a toolchain.
#
# - solink_libs_section_prefix
# - solink_libs_section_suffix
#     Same as libs_section_{pre,post}fix except used for solink instead of link.
#
# - extra_cflags
#     Extra flags to be appended when compiling C files (but not C++ files).
# - extra_cxxflags
#     Extra flags to be appended when compiling C++ files (but not C files).
# - extra_ccxxflags
#     Extra flags to be appended when compiling both C and C++ files.
# - extra_asmflags
#     Extra flags to be appended when compiling assembly.
# - extra_ldflags
#     Extra flags to be appended when linking
#
# TODO:
# - readelf
# - nm
# - strip

template("clang_toolchain") {
  # Check args
  toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "[GN ERROR] Toolchains must declare toolchain_args")

    toolchain_args = {
      forward_variables_from(invoker.toolchain_args, "*")
    }
    assert(defined(toolchain_args.current_cpu),
           "[GN ERROR] toolchain_args must specify a current_cpu")
    assert(defined(toolchain_args.current_os),
           "[GN ERROR] toolchain_args must specify a current_os")

    # ccache
    if (defined(toolchain_args.cc_wrapper)) {
      toolchain_cc_wrapper = toolchain_args.cc_wrapper
    } else {
      toolchain_cc_wrapper = cc_wrapper
    }

    if (share_ccache != "") {
      compiler_prefix = "CCACHE_DIR=" + share_ccache +
                        " CCACHE_NOHASHDIR=1 ${toolchain_cc_wrapper} "
    } else {
      compiler_prefix = "${toolchain_cc_wrapper} "
    }

    # Set compiling/linking tools and extra values.
    if (defined(invoker.cc)) {
      cc = compiler_prefix + invoker.cc
    } else {
      cc = compiler_prefix + "clang"
    }

    if (defined(invoker.cxx)) {
      cxx = compiler_prefix + invoker.cxx
    } else {
      cxx = compiler_prefix + "clang++"
    }

    if (defined(invoker.ld)) {
      ld = invoker.ld
    } else {
      ld = cxx
    }

    if (!defined(asm)) {
      if (defined(invoker.asm)) {
        asm = invoker.asm
      } else {
        asm = cc
      }
    }

    if (defined(invoker.ar)) {
      ar = invoker.ar
    } else {
      ar = "llvm-ar"
    }

    # Bring these into our scope for string interpolation with default values.
    if (defined(invoker.link_libs_section_prefix)) {
      link_libs_section_prefix = invoker.link_libs_section_prefix
    } else {
      link_libs_section_prefix = ""
    }

    if (defined(invoker.link_libs_section_suffix)) {
      link_libs_section_suffix = invoker.link_libs_section_suffix
    } else {
      link_libs_section_suffix = ""
    }

    if (defined(invoker.solink_libs_section_prefix)) {
      solink_libs_section_prefix = invoker.solink_libs_section_prefix
    } else {
      solink_libs_section_prefix = ""
    }

    if (defined(invoker.solink_libs_section_suffix)) {
      solink_libs_section_suffix = invoker.solink_libs_section_suffix
    } else {
      solink_libs_section_suffix = ""
    }

    if (defined(invoker.extra_cflags) && invoker.extra_cflags != "") {
      extra_cflags = " " + invoker.extra_cflags
    } else {
      extra_cflags = ""
    }

    if (defined(invoker.extra_cxxflags) && invoker.extra_cxxflags != "") {
      extra_cxxflags = " " + invoker.extra_cxxflags
    } else {
      extra_cxxflags = ""
    }

    if (defined(invoker.extra_ccxxflags) && invoker.extra_ccxxflags != "") {
      extra_ccxxflags = " " + invoker.extra_ccxxflags
    } else {
      extra_ccxxflags = ""
    }

    if (defined(invoker.extra_asmflags) && invoker.extra_asmflags != "") {
      extra_asmflags = " " + invoker.extra_asmflags
    } else {
      extra_asmflags = ""
    }

    if (defined(invoker.extra_ldflags) && invoker.extra_ldflags != "") {
      extra_ldflags = " " + invoker.extra_ldflags
    } else {
      extra_ldflags = ""
    }

    # These library switches can apply to all tools below.
    lib_switch = "-l"
    lib_dir_switch = "-L"

    # Object files go in this directory.
    object_subdir = "{{source_out_dir}}/{{label_name}}"

    # Compiler tools: C Compiler
    tool("cc") {
      depfile = "{{output}}.d"
      depsformat = "gcc"
      # command explain:
      # * -MD       : Write a depfile containing user and system headers
      # * -MF <file>: Write depfile output from -MMD, -MD, -MM, or -M to <file>
      # * -c        : Only run preprocess, compile, and assemble steps
      # * -o <file> : Write output to <file>
      command = "$cc -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_ccxxflags}${extra_cflags} -c {{source}} -o {{output}}"

      description = "CC {{output}}"

      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    # Compiler tools: C++ compiler
    tool("cxx") {
      depfile = "{{output}}.d"
      depsformat = "gcc"
      # command explain:
      # * -MD       : Write a depfile containing user and system headers
      # * -MF <file>: Write depfile output from -MMD, -MD, -MM, or -M to <file>
      # * -c        : Only run preprocess, compile, and assemble steps
      # * -o <file> : Write output to <file>
      command = "$cxx -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_ccxxflags}${extra_cxxflags} -c {{source}} -o {{output}}"

      description = "CXX {{output}}"

      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    # Compiler tools: Assembler
    tool("asm") {
      # For GCC we can just use the C compiler to compile assembly.
      depfile = "{{output}}.d"
      depsformat = "gcc"
      command = "$asm -MD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"

      description = "ASM {{output}}"

      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    # Linker tools: Linker for static libraries (archives)
    tool("alink") {
      # Name of the response file. If empty, no response file will be used.
      rspfile = "{{output}}.rsp"
      # The contents to be written to the response file. This may include all
      # or part of the command to send to the tool which allows you to get
      # around OS command-line length limits.
      rspfile_content = "{{inputs}}"

      # command = "rm -f {{output}} && ar rcs {{output}} {{inputs}}"
      command = "\"$ar\" -r -c -s -D {{output}} @\"$rspfile\""

      description = "AR {{output}}"

      # Output files for actions and copy targets.
      outputs =
          [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]

      # Default directory name for the output file relative to the root_build_dir.
      #
      # Shared libraries go in the target out directory by default so we can
      # generate different targets with the same name and not have them collide.
      default_output_dir = "{{target_out_dir}}"

      default_output_extension = ".a"
      output_prefix = "lib"
    }

    # Linker tools: Linker for shared libraries
    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"

      # Name of the response file. If empty, no response file will be used.
      rspfile = soname + ".rsp"
      # The contents to be written to the response file. This may include all
      # or part of the command to send to the tool which allows you to get
      # around OS command-line length limits.
      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_suffix"

      command =
          "$ld -shared {{ldflags}}${extra_ldflags} -o \"$sofile\" -Wl,-soname=\"$soname\" @\"$rspfile\""

      description = "SOLINK $soname"

      # Use this for {{output_extension}} expansions unless a target manually
      # overrides it (in which case {{output_extension}} will be what the target
      # specifies).
      default_output_extension = ".so"

      # Default directory name for the output file relative to the root_build_dir.
      #
      # Use this for {{output_dir}} expansions unless a target manually overrides
      # it (in which case {{output_dir}} will be what the target specifies).
      default_output_dir = "{{root_out_dir}}"

      # Output files for actions and copy targets.
      outputs = [ sofile ]

      link_output = sofile
      depend_output = sofile
      output_prefix = "lib"
    }

    # Linker tools: Linker for executables
    # TODO: strip & link wrapper
    tool("link") {
      # outfile = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"

      # Name of the response file. If empty, no response file will be used.
      rspfile = "${outfile}.rsp"
      # The contents to be written to the response file. This may include all
      # or part of the command to send to the tool which allows you to get
      # around OS command-line length limits.
      rspfile_content = "{{inputs}}"

      command = "$ld {{ldflags}}${extra_ldflags} -o ${outfile} ${link_libs_section_prefix} -Wl,--start-group @\"${rspfile}\" {{solibs}} {{libs}} -Wl,--end-group ${link_libs_section_suffix}"

      description = "LINK ${outfile}"

      # Default directory name for the output file relative to the root_build_dir.
      default_output_dir = "{{root_out_dir}}"
      outputs = [ outfile ]
    }

    # Other tools: Tool for creating stamp files
    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    # Other tools: Tool to copy files.
    tool("copy") {
      command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
      description = "COPY {{source}} {{output}}"
    }
  }
}
