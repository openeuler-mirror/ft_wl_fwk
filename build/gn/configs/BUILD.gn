# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.



import("//build/gn/configs/sanitizers/sanitizers.gni")

# Debug/release ----------------------------------------------------------------

config("debug") {
  defines = [
    "DYNAMIC_ANNOTATIONS_ENABLED=1",
    "WTF_USE_DYNAMIC_ANNOTATIONS=1",
  ]
  cflags = [
    # generates debugging information during compilation.
    "-g",
    # compiler optimization option that attempts to improve the runtime speed of the code by performing more optimizations.
    "-O0",
  ]
  cflags_cc = []

  if (is_clang) {
    # Allow comparing the address of references and 'this' against 0
    # in debug builds. Technically, these can never be null in
    # well-defined C/C++ and Clang can optimize such checks away in
    # release builds, but they may be used in asserts in debug builds.
    cflags_cc += [
      "-Wno-undefined-bool-conversion",
      "-Wno-tautological-undefined-compare",
    ]
  }

  # if (is_linux && current_cpu == "x64" && enable_iterator_debugging) {
  #   # Enable libstdc++ debugging facilities to help catch problems early, see
  #   # http://crbug.com/65151 .
  #   # defines += [ "_GLIBCXX_DEBUG=1" ]
  # }
}

config("release") {
  defines = [
    "NDEBUG",
    "LOG_HIDE_FILE_LINE"
  ]
  cflags = [
    # a compiler optimization option that attempts to improve the runtime speed of the code by performing more optimizations.
    "-O3",
  ]

  # Sanitizers.
  if (is_tsan) {
    defines += [
      "DYNAMIC_ANNOTATIONS_ENABLED=1",
      "WTF_USE_DYNAMIC_ANNOTATIONS=1",
    ]
  } else {
    defines += [ "NVALGRIND" ]
    if (!is_nacl) {
      # NaCl always enables dynamic annotations. Currently this value is set to
      # 1 for all .nexes.
      defines += [ "DYNAMIC_ANNOTATIONS_ENABLED=0" ]
    }
  }
}

# Default libraries ------------------------------------------------------------

# This config defines the default libraries applied to all targets.
config("default_libs") {
  if (is_linux) {
    libs = [
      "dl",
      "pthread",
      "rt",
    ]
  } else {
    assert(false, "[GN ERROR] Unsupport os for default libraries")
  }
}

# Common deps -----------------------------------------------------------

# Only //build/gn/configs/BUILDCONFIG.gn should reference this.
group("common_deps") {
  public_deps = []

  if (using_sanitizer) {
    public_deps += [ "//build/config/sanitizers:deps" ]
  }

  # if (use_custom_libcxx) {
  #   if (is_double_framework) {
  #     public_deps += [ "${asdk_libs_dir}/ndk/libcxx:libcxx" ]
  #   } else {
  #     public_deps += [ "//third_party/libcxx:libcxx" ]
  #   }
  # }

  # if (use_afl) {
  #   public_deps += [ "//third_party/afl" ]
  # }

  # if (use_musl_oh && current_toolchain != host_toolchain && !is_mingw) {
  #   public_deps += [ "//third_party/musl:soft_shared_libs" ]
  # }
  if (use_musl_oh) {
    # TODO
    # public_deps += [ "//third_party/musl:soft_shared_libs" ]
  }
}

group("executable_deps") {
  public_deps = [ ":common_deps" ]
}

group("loadable_module_deps") {
  public_deps = [ ":common_deps" ]
}

group("shared_library_deps") {
  public_deps = [ ":common_deps" ]
}

group("static_library_deps") {
  # if (use_musl_oh && current_toolchain != host_toolchain && !is_mingw) {
  #   public_deps = [ "//third_party/musl:musl_headers" ]
  # }
  if (use_musl_oh) {
    # TODO
    # public_deps = [ "//third_party/musl:musl_headers" ]
  }
}

group("source_set_deps") {
  # if (use_musl_oh && current_toolchain != host_toolchain && !is_mingw) {
  #   public_deps = [ "//third_party/musl:musl_headers" ]
  # }
  if (use_musl_oh) {
    # TODO
    # public_deps = [ "//third_party/musl:musl_headers" ]
  }
}

# Executable configs -----------------------------------------------------------

# This config defines the configs applied to all executables.
config("executable_config") {
  configs = []

  if (is_linux || is_ft || current_os == "aix") {
    if (is_ft) {
      configs += [ "//build/gn/configs/fangtian:executable_config" ]
    }
  }

  # # If we're using the prebuilt instrumented libraries with the sanitizers, we
  # # need to add ldflags to every binary to make sure they are picked up.
  # if (prebuilt_instrumented_libraries_available) {
  #   configs += [ "//third_party/instrumented_libraries:prebuilt_ldflags" ]
  # }
  # if (use_locally_built_instrumented_libraries) {
  #   configs += [ "//third_party/instrumented_libraries:locally_built_ldflags" ]
  # }
  # configs += [ "//build/config/sanitizers:link_executable" ]
}

# Shared library configs -------------------------------------------------------

# This config defines the configs applied to all shared libraries.
config("shared_library_config") {
  configs = []

  # # If we're using the prebuilt instrumented libraries with the sanitizers, we
  # # need to add ldflags to every binary to make sure they are picked up.
  # if (prebuilt_instrumented_libraries_available) {
  #   configs += [ "//third_party/instrumented_libraries:prebuilt_ldflags" ]
  # }
  # if (use_locally_built_instrumented_libraries) {
  #   configs += [ "//third_party/instrumented_libraries:locally_built_ldflags" ]
  # }
  # configs += [ "//build/config/sanitizers:link_shared_library" ]
}
